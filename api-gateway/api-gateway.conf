upstream auth-service {
    server auth-service:8080;
}

upstream mail-service {
    server mail-service:8080;
}

upstream accommodations-service {
    server accommodations-service:8080;
}
upstream reservations-service {
    server reservations-service:8080;
}

upstream user-service {
    server user-service:8080;
}

upstream notifications-service {
    server notifications-service:8080;
}

upstream recommendation-service {
    server recommendation-service:8080;
}

upstream metrics-command {
    server metrics-command:8080;
}

upstream metrics_query {
    server metrics_query:8080;
}

server {
    listen 443 ssl;
    ssl_certificate /etc/ssl/certs/localhost.crt;
    ssl_certificate_key /etc/ssl/private/localhost.key;
    server_name localhost;

    location /api/auth/ {
        proxy_pass http://auth-service;
        rewrite ^/api/auth/(.*)$ /$1 break;
    }

    location /api/accommodations/ {
        proxy_pass http://accommodations-service;
        rewrite ^/api/accommodations/(.*)$ /$1 break;
    }

    location /api/mail/ {
        proxy_pass http://mail-service;
        rewrite ^/api/mail/(.*)$ /$1 break;
        proxy_read_timeout 30s;    # Wait for response up to 30 seconds
        proxy_connect_timeout 10s; # Wait to establish connection up to 10 seconds
    }

     location /api/reservations/ {
        proxy_pass http://reservations-service;
        rewrite ^/api/reservations/(.*)$ /$1 break;
    }

    location /api/users/ {
        proxy_pass http://user-service;
        rewrite ^/api/users/(.*)$ /$1 break;
    }

    location /api/notifications/ {
        proxy_pass http://notifications-service;
        rewrite ^/api/notifications/(.*)$ /$1 break;
        proxy_read_timeout 30s;    # Wait for response up to 30 seconds
        proxy_connect_timeout 10s; # Wait to establish connection up to 10 seconds
    }

    location /api/recommendations/ {
        proxy_pass http://recommendation-service;
        rewrite ^/api/recommendations/(.*)$ /$1 break;
    }

    location /api/metrics/ {
        # Check if the request method is POST
        if ($request_method = POST) {
            proxy_pass http://metrics-command;
            rewrite ^/api/metrics/(.*)$ /$1 break;
        }

        # If the request method is not POST, assume it's GET
        if ($request_method = GET) {
            proxy_pass http://metrics-query;
            rewrite ^/api/metrics/(.*)$ /$1 break;
        }
    }

}
